
package GUI;
import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

public class LaborersFrame extends javax.swing.JFrame {
    /**
     * Creates new form LaborersFrame
     */
    public LaborersFrame() {
        initComponents();
        loadLaborerToTable();
        
    }
    
   private void loadLaborerToTable() {
    try {
        // Establish the database connection
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/css_db", "root", "");

        // Query to fetch laborer and booking details excluding Paid status
        String query = "SELECT l.Name, l.PhoneNumber, l.Role, b.Theme,b.BookingId, b.EventDate, l.HourlyRate, " +
                       "TIMESTAMPDIFF(HOUR, b.TimeStart, b.TimeEnd) AS total_hours, " +
                       "bl.StatusPay, " +
                       "(TIMESTAMPDIFF(HOUR, b.TimeStart, b.TimeEnd) * l.HourlyRate) AS TotalPay " +
                       "FROM laborer l " +
                       "INNER JOIN booking_laborer bl ON l.LaborerID = bl.LaborerID " +
                       "INNER JOIN booking b ON bl.BookingId = b.BookingId " +
                       "WHERE bl.StatusPay != 'Paid'"; // Exclude records with Paid status

        PreparedStatement ps = con.prepareStatement(query);
        ResultSet rs = ps.executeQuery();

        // Create a DefaultTableModel
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) LaborerTable.getModel();
        model.setRowCount(0); // Clear existing rows

        // Iterate through the result set
        while (rs.next()) {
            // Add row to the model
            model.addRow(new Object[]{
                rs.getString("Name"), // Laborer Name
                rs.getString("PhoneNumber"), // Laborer PhoneNumber
                rs.getString("Role"), // Laborer Role
                rs.getInt("BookingId"), // Booking ID
                rs.getString("Theme"), // Event Theme
                rs.getString("EventDate"), // Event Date
                rs.getDouble("HourlyRate"), // Laborer Hourly Rate
                rs.getDouble("TotalPay"), // Total Pay
                rs.getString("StatusPay") // Payment Status
            });
        }

        // Close connections
        rs.close();
        ps.close();
        con.close();

    } catch (Exception ex) {
        // Print full stack trace for debugging
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading laborers: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelLaborerDetails = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        cmbRole = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        addLaborer = new javax.swing.JButton();
        SearchLaborer = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        cmbStatus = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtHourlyRate = new javax.swing.JTextField();
        txtLaborerId = new javax.swing.JTextField();
        cmbStatusPay = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        LaborerTable = new javax.swing.JTable();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        AllLaborer = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        BtnCalendar = new javax.swing.JButton();
        BtnPackages = new javax.swing.JButton();
        BtnBooking = new javax.swing.JButton();
        BtnHome = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        BtnLaborer = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        BtnReport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(250, 125));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelLaborerDetails.setBackground(new java.awt.Color(210, 180, 140));
        jPanelLaborerDetails.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Laborer Id");
        jPanelLaborerDetails.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, 20));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Hourly Rate:");
        jPanelLaborerDetails.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 20, 90, 20));
        jPanelLaborerDetails.add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 240, -1));
        jPanelLaborerDetails.add(txtPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 240, -1));

        cmbRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "WaitStaff", " " }));
        jPanelLaborerDetails.add(cmbRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 20, 150, 20));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Status pay:");
        jPanelLaborerDetails.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 50, 90, 20));

        addLaborer.setBackground(new java.awt.Color(205, 133, 63));
        addLaborer.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addLaborer.setText("Add Laborer");
        addLaborer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLaborerActionPerformed(evt);
            }
        });
        jPanelLaborerDetails.add(addLaborer, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 100, 120, 40));

        SearchLaborer.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        SearchLaborer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/search (1).png"))); // NOI18N
        SearchLaborer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchLaborerActionPerformed(evt);
            }
        });
        jPanelLaborerDetails.add(SearchLaborer, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 20, 60, 50));

        Update.setBackground(new java.awt.Color(205, 133, 63));
        Update.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });
        jPanelLaborerDetails.add(Update, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 100, 120, 40));

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "Not Active" }));
        jPanelLaborerDetails.add(cmbStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 50, 150, 20));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Role:");
        jPanelLaborerDetails.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, 37, 20));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setText("Phone:");
        jPanelLaborerDetails.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 48, 20));

        txtHourlyRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHourlyRateActionPerformed(evt);
            }
        });
        jPanelLaborerDetails.add(txtHourlyRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 20, 150, -1));
        jPanelLaborerDetails.add(txtLaborerId, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, 240, -1));

        cmbStatusPay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "N/A", "Unpaid", "Paid" }));
        jPanelLaborerDetails.add(cmbStatusPay, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 50, 150, 20));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Status:");
        jPanelLaborerDetails.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 50, 60, 20));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Name:");
        jPanelLaborerDetails.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, 20));

        getContentPane().add(jPanelLaborerDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 170, 960, 150));

        LaborerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Phone Number", "Role", "EventID", "Event", "Date", "HourlyRate", "TotalPay", "StatusPay"
            }
        ));
        LaborerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(LaborerTable);

        jScrollPane6.setViewportView(jScrollPane5);

        getContentPane().add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 1060, 180));

        jLabel20.setFont(new java.awt.Font("Castellar", 3, 48)); // NOI18N
        jLabel20.setText("L");
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 100, 40, -1));

        jLabel22.setFont(new java.awt.Font("Segoe UI", 3, 32)); // NOI18N
        jLabel22.setText("aborer");
        getContentPane().add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 110, 110, -1));

        jLabel19.setFont(new java.awt.Font("Castellar", 3, 48)); // NOI18N
        jLabel19.setText("I");
        getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 100, 40, -1));

        jLabel21.setFont(new java.awt.Font("Segoe UI", 3, 32)); // NOI18N
        jLabel21.setText("nformation");
        getContentPane().add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 110, 190, -1));

        AllLaborer.setBackground(new java.awt.Color(205, 133, 63));
        AllLaborer.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        AllLaborer.setText("Laborer Records");
        AllLaborer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AllLaborerActionPerformed(evt);
            }
        });
        getContentPane().add(AllLaborer, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 110, 140, 40));

        jLabel16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Untitled design.png"))); // NOI18N
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 1080, 440));

        jPanel2.setBackground(new java.awt.Color(210, 180, 140));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BtnCalendar.setBackground(new java.awt.Color(210, 180, 140));
        BtnCalendar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BtnCalendar.setText("CALENDAR");
        BtnCalendar.setBorder(null);
        BtnCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnCalendarActionPerformed(evt);
            }
        });
        jPanel2.add(BtnCalendar, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 30, 120, 40));

        BtnPackages.setBackground(new java.awt.Color(210, 180, 140));
        BtnPackages.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BtnPackages.setText("PACKAGES");
        BtnPackages.setBorder(null);
        BtnPackages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnPackagesActionPerformed(evt);
            }
        });
        jPanel2.add(BtnPackages, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 30, 120, 40));

        BtnBooking.setBackground(new java.awt.Color(210, 180, 140));
        BtnBooking.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BtnBooking.setText("BOOKING");
        BtnBooking.setBorder(null);
        BtnBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBookingActionPerformed(evt);
            }
        });
        jPanel2.add(BtnBooking, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 30, 120, 40));

        BtnHome.setBackground(new java.awt.Color(210, 180, 140));
        BtnHome.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BtnHome.setText("HOME");
        BtnHome.setBorder(null);
        BtnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnHomeActionPerformed(evt);
            }
        });
        jPanel2.add(BtnHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, 120, 40));

        jLabel13.setFont(new java.awt.Font("Castellar", 3, 30)); // NOI18N
        jLabel13.setText("PALATES  ");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 280, 60));

        jLabel14.setFont(new java.awt.Font("Castellar", 3, 30)); // NOI18N
        jLabel14.setText("&   plates");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 210, 60));

        BtnLaborer.setBackground(new java.awt.Color(205, 133, 63));
        BtnLaborer.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BtnLaborer.setText("LABOR");
        BtnLaborer.setBorder(null);
        BtnLaborer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnLaborerActionPerformed(evt);
            }
        });
        jPanel2.add(BtnLaborer, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 30, 120, 40));

        logout.setBackground(new java.awt.Color(210, 180, 140));
        logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/logout (1).png"))); // NOI18N
        logout.setBorder(null);
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        jPanel2.add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 30, 40, 40));

        BtnReport.setBackground(new java.awt.Color(210, 180, 140));
        BtnReport.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        BtnReport.setText("REPORT");
        BtnReport.setBorder(null);
        BtnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnReportActionPerformed(evt);
            }
        });
        jPanel2.add(BtnReport, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 30, 120, 40));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 90));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addLaborerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLaborerActionPerformed
    String name = txtName.getText().trim();
    String phone = txtPhone.getText().trim();
    String role = cmbRole.getSelectedItem().toString();
    String status = cmbStatus.getSelectedItem().toString();
    String hourlyRateStr = txtHourlyRate.getText().trim();

    // Validate input
    if (name.isEmpty() || phone.isEmpty() || hourlyRateStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all the details.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    double hourlyRate;
    try {
        hourlyRate = Double.parseDouble(hourlyRateStr);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid hourly rate. Please enter a numeric value.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Database insertion
    String query = "INSERT INTO laborer (Name, PhoneNumber, Role, Status, HourlyRate) VALUES (?, ?, ?, ?, ?)";
    try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/css_db", "root", "");
         PreparedStatement ps = con.prepareStatement(query)) {

        ps.setString(1, name);
        ps.setString(2, phone);
        ps.setString(3, role);
        ps.setString(4, status);
        ps.setDouble(5, hourlyRate);

        int rowsInserted = ps.executeUpdate();
        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Laborer added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add laborer.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
    }//GEN-LAST:event_addLaborerActionPerformed

    private void SearchLaborerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchLaborerActionPerformed
    String laborerIdStr = txtLaborerId.getText().trim(); // Laborer ID input field (for searching by ID)
    String name = txtName.getText().trim(); // Name input field (for searching by name)

    // Validate input
    if (laborerIdStr.isEmpty() && name.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter either a Laborer ID or Name to search.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    StringBuilder query = new StringBuilder("SELECT * FROM laborer WHERE");

    // Add conditions based on the input provided by the user
    if (!laborerIdStr.isEmpty()) {
        query.append(" LaborerId = ?");
    }
    if (!name.isEmpty()) {
        if (!laborerIdStr.isEmpty()) {
            query.append(" OR");  // Use OR if both fields are provided
        }
        query.append(" Name LIKE ?");
    }

    try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/css_db", "root", "");
         PreparedStatement ps = con.prepareStatement(query.toString())) {

        int index = 1;

        // Set the parameters for the query
        if (!laborerIdStr.isEmpty()) {
            ps.setInt(index++, Integer.parseInt(laborerIdStr)); // Set LaborerId if provided
        }
        if (!name.isEmpty()) {
            ps.setString(index++, "%" + name + "%"); // Use LIKE for partial name matching
        }

        ResultSet rs = ps.executeQuery();

        // If a result is found, auto-fill the fields
        if (rs.next()) {
            txtLaborerId.setText(String.valueOf(rs.getInt("LaborerId")));  // Set LaborerId field
            txtName.setText(rs.getString("Name"));  // Set Name field
            txtPhone.setText(rs.getString("PhoneNumber"));  // Set Phone field
            cmbRole.setSelectedItem(rs.getString("Role"));  // Set Role ComboBox
            cmbStatus.setSelectedItem(rs.getString("Status"));  // Set Status ComboBox
            txtHourlyRate.setText(String.valueOf(rs.getDouble("HourlyRate")));  // Set HourlyRate field
        } else {
            JOptionPane.showMessageDialog(this, "No laborer found with the given details.", "Search Result", JOptionPane.INFORMATION_MESSAGE);
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
    }//GEN-LAST:event_SearchLaborerActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
 String name = txtName.getText().trim();
    String phone = txtPhone.getText().trim();
    String role = cmbRole.getSelectedItem().toString();
    String status = cmbStatus.getSelectedItem().toString(); // Active or Inactive
    String statusPay = cmbStatusPay.getSelectedItem().toString(); // Paid or Unpaid
    String hourlyRateStr = txtHourlyRate.getText().trim();
    String laborerIdStr = txtLaborerId.getText().trim(); // Laborer ID

    // Validate input fields
    if (name.isEmpty() || phone.isEmpty() || hourlyRateStr.isEmpty() || laborerIdStr.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all the details.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int laborerId;
    try {
        laborerId = Integer.parseInt(laborerIdStr); // Convert Laborer ID to integer
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid Laborer ID. Please enter a numeric value.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    double hourlyRate;
    try {
        hourlyRate = Double.parseDouble(hourlyRateStr); // Convert hourly rate to double
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid hourly rate. Please enter a numeric value.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Query to check event date for past events
    String checkPastEventQuery = "SELECT b.eventDate, bl.StatusPay FROM booking_laborer bl " +
                                 "INNER JOIN booking b ON bl.bookingID = b.bookingID " +
                                 "WHERE bl.LaborerID = ? AND b.eventDate < ?"; // Only select past events

    try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/css_db", "root", "");
         PreparedStatement psCheck = con.prepareStatement(checkPastEventQuery)) {

        psCheck.setInt(1, laborerId);
        psCheck.setDate(2, new java.sql.Date(System.currentTimeMillis())); // Current date to filter past events

        try (ResultSet rs = psCheck.executeQuery()) {
            if (rs.next()) {
                // Proceed with updating the laborer's details and statusPay for past events
                String updateLaborerQuery = "UPDATE laborer l " +
                                            "INNER JOIN booking_laborer bl ON l.LaborerID = bl.LaborerID " +
                                            "INNER JOIN booking b ON bl.bookingID = b.bookingID " +
                                            "SET l.Name = ?, l.PhoneNumber = ?, l.Role = ?, l.Status = ?, l.HourlyRate = ?, bl.StatusPay = ? " +
                                            "WHERE l.LaborerID = ? AND b.eventDate < ?"; // Only update for past events

                try (PreparedStatement psUpdate = con.prepareStatement(updateLaborerQuery)) {
                    // Set parameters for the update query
                    psUpdate.setString(1, name);
                    psUpdate.setString(2, phone);
                    psUpdate.setString(3, role);
                    psUpdate.setString(4, status); // "Active" or "Inactive"
                    psUpdate.setDouble(5, hourlyRate);
                    psUpdate.setString(6, statusPay); // "Paid" or "Unpaid"
                    psUpdate.setInt(7, laborerId);
                    psUpdate.setDate(8, new java.sql.Date(System.currentTimeMillis())); // Current date to filter past events

                    // Execute the update
                    int rowsUpdated = psUpdate.executeUpdate();

                    if (rowsUpdated > 0) {
                        JOptionPane.showMessageDialog(this, "Laborer information and payment status updated for past events!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "No past events found for the selected laborer.", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                    loadLaborerToTable(); // Reload the table after update
                }
            } else {
                JOptionPane.showMessageDialog(this, "No past events found for the selected laborer.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Database error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace();
    }
    }//GEN-LAST:event_UpdateActionPerformed

    private void txtHourlyRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHourlyRateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHourlyRateActionPerformed

    private void AllLaborerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AllLaborerActionPerformed
    AllLaborer.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                LaborersTable lt = new LaborersTable();
                lt.setVisible(true);
                lt.setLocationRelativeTo(null); // Center the SignUP frame
            }
        });
    }//GEN-LAST:event_AllLaborerActionPerformed

    private void BtnCalendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnCalendarActionPerformed
        BtnCalendar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                ReservationCalendar calendar = new ReservationCalendar();
                calendar.setVisible(true);
                calendar.setLocationRelativeTo(null); // Center the SignUP frame
            }
        });
    }//GEN-LAST:event_BtnCalendarActionPerformed

    private void BtnPackagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnPackagesActionPerformed
        BtnPackages.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                PackagesFrame packages = new PackagesFrame();
                packages.setVisible(true);
                packages.setLocationRelativeTo(null); // Center the SignUP frame
            }
        });
    }//GEN-LAST:event_BtnPackagesActionPerformed

    private void BtnBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBookingActionPerformed
        BtnBooking.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                BookingProcess booking = new BookingProcess();
                booking.setVisible(true);
                booking.setLocationRelativeTo(null); // Center the SignUP frame
            }
        });
    }//GEN-LAST:event_BtnBookingActionPerformed

    private void BtnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnHomeActionPerformed
        BtnHome.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                HomeFrame home = new HomeFrame();
                home.setVisible(true);
                home.setLocationRelativeTo(null); // Center the SignUP frame
            }
        });
    }//GEN-LAST:event_BtnHomeActionPerformed

    private void BtnLaborerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnLaborerActionPerformed
        BtnLaborer.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                LaborersTable laborer = new LaborersTable();
                laborer.setVisible(true);
                laborer .setLocationRelativeTo(null); // Center the SignUP frame
            }
        });
    }//GEN-LAST:event_BtnLaborerActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        logout.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // Show a confirmation dialog to the user before logging out
                int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to log out?", "Log Out", JOptionPane.YES_NO_OPTION);

                // If the user selects "Yes" (confirm == 0), log out and dispose of the frame
                if (confirm == JOptionPane.YES_OPTION) {
                    dispose(); // Close the current LogIn frame
                    LogIn login = new LogIn();
                    login.setVisible(true); // Make the LogIn frame visible
                    login.setLocationRelativeTo(null); // Center the LogIn frame
                }
            }
        });
    }//GEN-LAST:event_logoutActionPerformed

    private void BtnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnReportActionPerformed
        BtnReport.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                dispose();
                Sales laborer = new Sales();
                laborer.setVisible(true);
                laborer .setLocationRelativeTo(null); // Center the SignUP frame
            }
        });
    }//GEN-LAST:event_BtnReportActionPerformed



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LaborersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LaborersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LaborersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LaborersFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LaborersFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AllLaborer;
    private javax.swing.JButton BtnBooking;
    private javax.swing.JButton BtnCalendar;
    private javax.swing.JButton BtnHome;
    private javax.swing.JButton BtnLaborer;
    private javax.swing.JButton BtnPackages;
    private javax.swing.JButton BtnReport;
    private javax.swing.JTable LaborerTable;
    private javax.swing.JButton SearchLaborer;
    private javax.swing.JButton Update;
    private javax.swing.JButton addLaborer;
    private javax.swing.JComboBox<String> cmbRole;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JComboBox<String> cmbStatusPay;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelLaborerDetails;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton logout;
    private javax.swing.JTextField txtHourlyRate;
    private javax.swing.JTextField txtLaborerId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
